Запуск проекта

    В корне проекта:

docker-compose up -d --build

    Проверка контейнеров:

docker ps

    Core backend: http://localhost:3000
    MySQL: localhost:3306, пользователь renter_admin, база renter


Как запускать приложение

Как теперь работает
    npm run dev → обычный dev режим (Vite + Electron)
    npm run build → обычная сборка (без анализатора)
    npm run build:analyze → сборка с анализатором
    → откроется analyze/stats.html с графиком веса модулей


Структура проекта

renter/
│── app/                        # фронтенд (Electron + React)
│── core/                        # backend (Node.js + Express + MySQL)
│   │── Dockerfile              # production
│   │── Dockerfile.dev          # development
│   │── package.json
│   │── index.js
│── db/                         # данные MySQL (bind mount в dev)
│── docker-compose.yml          # базовый (prod)
│── docker-compose.override.yml # dev-override
│── .env                        # общие переменные окружения


📦 Backend (core/) — структура

core/
└─ src/
   ├─ index.js                 # вход: Express + WS
   ├─ config/
   │   └─ env.js               # чтение .env с дефолтами
   ├─ db/
   │   ├─ connection.js        # MySQL пул соединений
   │   └─ query/
   │       └─ init.sql         # базовые таблицы (вкл. white/black list, idem)
   ├─ logic/
   │   ├─ profit.js            # расчет доходности
   │   └─ crypto.js            # рассчеты по криптовалютам
   │   └─ config/
   │       └─ rent.json        # дефолтный конфиг по аренде серверов
   │       └─ marketplace.json # дефолтный конфиг по clore marketplace
   │       └─ crypto.json      # дефолтный конфиг по криптовалютам (биржам, пулам)
   ├─ middlewares/
   │   ├─ errorHandler.js
   │   └─ idempotency.js       # идемпотентность по заголовку Idempotency-Key
   ├─ utils/
   │   ├─ cache.js             # простой кэш с TTL
   │   └─ logger.js
   ├─ services/
   │   ├─ auditor.js           # работа с белым/чёрным списком
   │   ├─ cex.js               # работа с биржами (CEX)
   │   ├─ clore.js             # обёртка Clore API
   │   ├─ hive.js              # обёртка HiveOS API
   │   ├─ github.js            # работа с github
   │   ├─ profit.js            # расчёт доходности/порогов
   │   └─ pool.js              # работа с майнинг пулами
   ├─ routes/
   │   ├─ market.js            # получение списков серверов по фильтрам
   │   ├─ rentals.js           # аренда/продление/релиз
   │   ├─ servers.js           # выдача офферов + бел/чёрн списки
   │   ├─ status.js            # работа со списком арендованых серверов
   │   └─ scripts.js           # генерация/выполнение setup/run
   └─ websocket/
       └─ index.js             # WS: /ws/logs, /ws/status

    app/
    ├─ package.json
    ├─ electron.js          # main-процесс Electron
    ├─ preload.js           # безопасный мост (если нужен IPC)
    ├─ index.html
    ├─ vite.config.js       # Vite (порт 5173, чтоб не конфликтовать с backend:3000)
    └─ src/
       ├─ main.jsx
       ├─ App.jsx
       ├─ styles.css
       ├─ lib/
       │   ├─ api.js        # fetch к backend
       │   └─ ws.js         # подключение к WS
       ├─ components/
       │   ├─ Nav.jsx
       │   ├─ ServerTable.jsx
       │   ├─ LogViewer.jsx
       │   └─ Terminal.jsx
       └─ pages/
           ├─ Servers.jsx
           ├─ Rentals.jsx
           ├─ Settings.jsx
           └─ Logs.jsx


Компоненты - app
    electron — само приложение
    vite, @vitejs/plugin-react — сборка фронта
    vite-plugin-imagemin, rollup-plugin-visualizer — оптимизация и анализ бандла
    sass — компиляция .scss → .css
    cross-env — безопасно задаёт NODE_ENV для разных ОС

Компоненты - core
    express — HTTP сервер
    mysql2 — клиент для MySQL
    socket.io — WebSocket сервер (для live-логов)
    winston — логирование
    dotenv — работа с .env
    app-root-path — упрощённые пути (base_dir)
    nodemon — перезапуск в dev
    eslint — линтер
    jest — тестирование



{
  "name": "renter",
  "version": "1.0.0",
  "description": "Renter core application",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",    // запуск в продакшене
    "dev": "nodemon index.js",   // запуск в режиме разработки с авто-перезапуском
    "test": "jest"               // юнит-тесты (Jest)
  },
  "dependencies": {
    "express": "^4.18.2",        // веб-фреймворк для API
    "mysql2": "^3.5.0",          // драйвер для MySQL (поддерживает промисы)
    "dotenv": "^16.0.3"          // работа с .env файлами
  },
  "devDependencies": {
    "nodemon": "^3.0.2",         // авто-перезапуск при изменениях (dev only)
    "jest": "^29.6.0"            // фреймворк для тестирования
  }
}





